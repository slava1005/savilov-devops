# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform CI/CD'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Set to "true" to destroy infrastructure'
        required: false
        default: 'false'
      apply:
        description: 'Set to "true" to apply infrastructure changes'
        required: false
        default: 'false'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    env:
      TOKEN: ${{ secrets.YC_TOKEN }}
      CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
      FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
      TF_VAR_exclude_ansible: 'true'

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: "1.5.5"

    - name: Terraform Init
      run: terraform -chdir=./terraform init

    - name: Terraform Format and Validate
      run: terraform -chdir=./terraform validate

    - name: Terraform Plan
      run: |
        terraform -chdir=./terraform plan -input=false -out=tfplan \
        -var="token=${{ secrets.YC_TOKEN }}" \
        -var="cloud_id=${{ secrets.YC_CLOUD_ID }}" \
        -var="folder_id=${{ secrets.YC_FOLDER_ID }}" \
        -var="exclude_ansible=${{ env.TF_VAR_exclude_ansible }}"

    - name: Terraform Apply (Automatic Trigger)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: terraform -chdir=./terraform apply -input=false tfplan

    - name: Terraform Apply (Manual Trigger)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.apply == 'true'
      run: terraform -chdir=./terraform apply -input=false tfplan

    - name: Terraform Destroy (Manual Trigger)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'
      run: |
        terraform -chdir=./terraform destroy -input=false -auto-approve \
        -var="token=${{ secrets.YC_TOKEN }}" \
        -var="cloud_id=${{ secrets.YC_CLOUD_ID }}" \
        -var="folder_id=${{ secrets.YC_FOLDER_ID }}"
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
